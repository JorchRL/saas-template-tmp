// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// models for  user, organization, membership, role, subscription, payment and plan types

model Organization {
    id        String   @id @default(cuid()) @map("_id")
    name      String
    members   Membership[]
    payments  Payment[]
    subscription Subscription
}

model Membership {
    id        String   @id @default(cuid()) @map("_id")
    user      User 
    organization Organization
    code      String
    email_verified Boolean
}

// subscription record
model Subscription {
    id        String   @id @default(cuid()) @map("_id")
    organization Organization
    user      User

    plan      SubscriptionType
    payment   Payment

    status    String
    start_date DateTime
    end_date DateTime
}

// record of payment
model Payment {
    id        String   @id @default(cuid()) @map("_id")
    organization Organization
    amount    Int
    currency  String
    status    String
    payment_method String
    payment_method_details String
    receipt_url String
    subscription_id String
    customer_id String
}


enum RoleType {
    OWNER
    ADMIN
    MEMBER
}

enum SubscriptionType {
    FREE
    PREMIUM
    ENTERPRISE
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role         RoleType
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
